(() => { const root = document.documentElement; const $ = id => document.getElementById(id); const norm = s => (s || '').toLowerCase().normalize('NFD').replace(/\p{Diacritic}/gu, ''); const escapeHtml = s => s.replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;'); const saved = localStorage.getItem('theme'); if (saved === 'light') root.classList.add('light'); document.addEventListener('DOMContentLoaded', () => { initThemeToggle(); initMenuToggle(); initScrollProgress(); initHero(); initSectionObserver(); initSkills(); initProjects(); initTimeline(); initPosts(); initPostPage(); initPrefetch(); registerSW(); }); function initThemeToggle() { $('theme-toggle')?.addEventListener('click', () => { root.classList.toggle('light'); localStorage.setItem('theme', root.classList.contains('light') ? 'light' : 'dark'); }); } const tagColors = {}; function colorFor(tag) { if (!tagColors[tag]) { const hue = Object.keys(tagColors).length * 60 % 360; tagColors[tag] = `hsl(${hue} 70% 50%)`; } return tagColors[tag]; } function card(p, qWords = []) { const el = document.createElement('article'); el.className = 'card'; const title = highlight(p.title, qWords); const excerpt = highlight(p.excerpt, qWords); const words = (p.content || '').match(/\S+/g); const mins = Math.max(1, Math.round((words ? words.length : 0) / 220)); const tags = p.tags.map(t => `<span class="tag" style="--color:${colorFor(t)}">${t}</span>`).join(' '); el.innerHTML = ` <div class="meta">${p.date} • ${mins} min</div> <h3><a href="post.html?id=${encodeURIComponent(p.id)}">${title}</a></h3> <p>${excerpt}</p> <div class="tags">${tags}</div> <a class="arrow" href="post.html?id=${encodeURIComponent(p.id)}">Lire →</a> `; return el; } function highlight(text, qWords) { if (!qWords.length) return text; const normText = norm(text); const ranges = []; for (const w of qWords) { let start = 0; while (true) { const idx = normText.indexOf(w, start); if (idx === -1) break; ranges.push({ start: idx, end: idx + w.length }); start = idx + w.length; } } if (!ranges.length) return text; ranges.sort((a, b) => a.start - b.start); const merged = []; for (const r of ranges) { const last = merged[merged.length - 1]; if (last && r.start < last.end) { last.end = Math.max(last.end, r.end); } else { merged.push({ ...r }); } } let out = '', lastIdx = 0; for (const m of merged) { out += text.slice(lastIdx, m.start) + '<mark>' + text.slice(m.start, m.end) + '</mark>'; lastIdx = m.end; } return out + text.slice(lastIdx); } async function initPosts() { const listEl = $('posts'); const latestEl = $('latest-posts'); if (!listEl && !latestEl) return; if (listEl) listEl.innerHTML = '<p class="meta">Chargement…</p>'; const res = await fetch('posts.json'); const posts = await res.json(); const urlTag = new URLSearchParams(location.search).get('tag') || ''; const tagSelect = $('tag-filter'); const searchInput = $('search'); const tagPills = $('tag-pills'); const resultCount = $('result-count'); if (tagSelect) { const tags = Array.from(new Set(posts.flatMap(p => p.tags))).sort(); tagSelect.append(...tags.map(t => { const o = document.createElement('option'); o.value = t; o.textContent = t; return o; })); } if (tagPills) { const counts = posts.flatMap(p => p.tags).reduce((a, t) => { a[t] = (a[t] || 0) + 1; return a; }, {}); const top = Object.entries(counts).sort((a, b) => b[1] - a[1]).slice(0, 10).map(([t]) => t); top.forEach(t => { const b = document.createElement('button'); b.type = 'button'; b.className = 'tag-pill' + (t === urlTag ? ' active' : ''); b.dataset.tag = t; b.textContent = t; tagPills.appendChild(b); }); } if (latestEl) { posts.slice(0, 3).forEach(p => latestEl.appendChild(card(p))); } if (listEl) { let page = 1, perPage = 9, currentTag = urlTag, q = '', qWords = []; if (tagSelect) tagSelect.value = currentTag; const button = $('load-more'); function updatePills() { tagPills && [...tagPills.children].forEach(b => b.classList.toggle('active', b.dataset.tag === currentTag)); } function render() { listEl.innerHTML = ''; const filtered = posts .filter(p => !currentTag || p.tags.includes(currentTag)) .map(p => { const hay = norm(p.title + ' ' + p.excerpt); const score = qWords.reduce((s, w) => s + (hay.includes(w) ? 1 : 0), 0); return { ...p, score }; }) .filter(p => qWords.length ? p.score > 0 : true) .sort((a, b) => { if (qWords.length && b.score !== a.score) return b.score - a.score; return new Date(b.date) - new Date(a.date); }); const pageItems = filtered.slice(0, page * perPage); pageItems.forEach(p => listEl.appendChild(card(p, qWords))); button.style.display = (filtered.length > page * perPage) ? 'inline-flex' : 'none'; if (resultCount) resultCount.textContent = `${filtered.length} résultats`; updatePills(); } tagSelect?.addEventListener('change', e => { currentTag = e.target.value; page = 1; render(); }); tagPills?.addEventListener('click', e => { const t = e.target.closest('.tag-pill'); if (!t) return; currentTag = t.dataset.tag; if (tagSelect) tagSelect.value = currentTag; page = 1; render(); }); searchInput?.addEventListener('input', e => { q = e.target.value || ''; qWords = norm(q).split(/\s+/).filter(Boolean); page = 1; render(); }); button?.addEventListener('click', () => { page++; render(); }); render(); } } async function initPostPage() { const wrap = $('post-article'); if (!wrap) return; const params = new URLSearchParams(location.search); const id = params.get('id'); const data = await (await fetch('posts.json')).json(); const post = data.find(p => p.id === id) || data[0]; document.title = post.title + ' — Robin'; $('post-title').textContent = post.title; const metaEl = $('post-meta'); const cover = $('post-cover'); if (post.cover) { const img = document.createElement('img'); img.src = post.cover; img.loading = 'lazy'; img.alt = ''; img.style.borderRadius = '18px'; img.style.width = '100%'; img.style.height = 'auto'; cover.innerHTML = ''; cover.appendChild(img); } const contentEl = $('post-content'); contentEl.innerHTML = post.content.split('\n\n').map(block => { if (block.startsWith('```')) { const code = block.replace(/^```[a-z]*\n?|```$/g, '').replace(/```$/, ''); return `<pre class="card"><code>${escapeHtml(code)}</code></pre>`; } return `<p>${block}</p>`; }).join(''); const plain = (post.content || '').replace(/```[\s\S]*?```/g, ''); const words = (plain.match(/\S+/g) || []).length; const mins = Math.max(1, Math.round(words / 220)); if (metaEl) metaEl.textContent = `${post.date} • ${post.tags.join(', ')} • ${mins} min`; document.querySelectorAll('#post-content pre').forEach(pre => { const btn = document.createElement('button'); btn.className = 'copy-btn'; btn.type = 'button'; btn.textContent = 'Copier'; btn.addEventListener('click', async () => { try { await navigator.clipboard.writeText(pre.textContent); btn.textContent = 'Copié !'; setTimeout(() => btn.textContent = 'Copier', 1200); } catch (e) {} }); pre.appendChild(btn); }); const progress = $('read-progress'); if (progress) { const target = $('post-article'); const onScroll = () => { const total = target.scrollHeight - window.innerHeight; const scrolled = Math.min(Math.max(window.scrollY - target.offsetTop, 0), total); progress.style.width = (total > 0 ? (scrolled / total) * 100 : 0).toFixed(2) + '%'; }; window.addEventListener('scroll', onScroll, { passive: true }); onScroll(); } const related = data.filter(p => p.id !== post.id && p.tags.some(t => post.tags.includes(t))).slice(0, 3); const relEl = $('related'); relEl.innerHTML = ''; related.forEach(p => { const a = document.createElement('article'); a.className = 'card'; a.innerHTML = `<h3><a href="post.html?id=${encodeURIComponent(p.id)}">${p.title}</a></h3><p class="meta">${p.date} • ${p.tags.join(', ')}</p>`; relEl.appendChild(a); }); const ld = { "@context": "https: "@type": "Article", "headline": post.title, "description": post.excerpt || post.title, "datePublished": post.date, "author": { "@type": "Person", "name": "Robin" }, "mainEntityOfPage": location.href }; const ldEl = $('ld-article'); if (ldEl) ldEl.textContent = JSON.stringify(ld, null, 2); } function initSkills() { const bars = document.querySelectorAll('.skill .bar span'); if (!bars.length) return; const io = new IntersectionObserver(entries => { entries.forEach(e => { if (e.isIntersecting) { e.target.style.width = e.target.dataset.level + '%'; io.unobserve(e.target); } }); }, { threshold: 0.5 }); bars.forEach(b => io.observe(b)); } function initTimeline() { const items = document.querySelectorAll('.timeline li'); if (!items.length) return; const io = new IntersectionObserver(entries => { entries.forEach(e => e.target.classList.toggle('active', e.isIntersecting)); }, { threshold: 0.6 }); items.forEach(i => io.observe(i)); } function initProjects() { const grid = $('project-grid'); if (!grid) return; const filters = document.querySelectorAll('.filter-btn'); const modal = $('project-modal'); const body = $('modal-body'); const close = modal.querySelector('.modal-close'); const projects = [ {title:'Pipeline scRNA-seq éducatif',category:'Génomique',img:'https: {title:'Exploration omique multimodale',category:'Bioinformatique',img:'https: {title:'Classifieur IA clinique',category:'IA',img:'https: ]; function render(list) { grid.innerHTML = ''; list.forEach(p => { const card = document.createElement('article'); card.className = 'card project-card'; card.dataset.cat = p.category; card.innerHTML = `<img src="${p.img}" alt=""><h3>${p.title}</h3>`; card.addEventListener('click', () => open(p)); grid.appendChild(card); }); } function open(p) { body.innerHTML = `<h3>${p.title}</h3><p>${p.methodology}</p><div class="tags">${p.stack.map(s=>`<span class=\"tag\" style=\"--color:${colorFor(s)}\">${s}</span>`).join(' ')}</div><p>${p.results}</p><p><a href="${p.github}">GitHub</a> • <a href="${p.demo}">Démo</a></p><img src="${p.img}" alt="">`; modal.hidden = false; } close.addEventListener('click', () => modal.hidden = true); modal.addEventListener('click', e => { if (e.target === modal) modal.hidden = true; }); filters.forEach(btn => btn.addEventListener('click', () => { filters.forEach(b => b.classList.remove('active')); btn.classList.add('active'); const cat = btn.dataset.cat; render(cat === 'all' ? projects : projects.filter(p => p.category === cat)); })); render(projects); } function initPrefetch() { const canPrefetch = 'relList' in HTMLLinkElement.prototype && HTMLLinkElement.prototype.relList.supports?.('prefetch'); if (!canPrefetch) return; const isInternal = url => { try { const u = new URL(url, location.href); return u.origin === location.origin; } catch { return false; } }; document.addEventListener('mouseover', e => { const a = e.target.closest('a[href]'); if (!a || !isInternal(a.href)) return; const link = document.createElement('link'); link.rel = 'prefetch'; link.href = a.href; link.as = 'document'; document.head.appendChild(link); }, { passive: true }); } function initMenuToggle() { const btn = $('menu-toggle'); const menu = document.querySelector('.menu'); if (!btn || !menu) return; btn.addEventListener('click', () => { btn.classList.toggle('open'); menu.classList.toggle('open'); }); } function initScrollProgress() { const bar = $('scroll-progress'); if (!bar) return; const onScroll = () => { const total = document.body.scrollHeight - window.innerHeight; const scrolled = Math.min(window.scrollY, total); bar.style.width = (total > 0 ? (scrolled / total) * 100 : 0).toFixed(2) + '%'; }; window.addEventListener('scroll', onScroll, { passive: true }); onScroll(); } function initHero() { const canvas = $('hero-bg'); if (!canvas) return; const ctx = canvas.getContext('2d'); const count = 40, connect = 120; const particles = Array.from({ length: count }, () => ({ x: Math.random() * canvas.clientWidth, y: Math.random() * canvas.clientHeight, vx: (Math.random() - .5) * .5, vy: (Math.random() - .5) * .5 })); function resize(){canvas.width = canvas.clientWidth; canvas.height = canvas.clientHeight;} window.addEventListener('resize', resize); resize(); function draw(){ ctx.clearRect(0,0,canvas.width,canvas.height); for(const p of particles){ p.x+=p.vx; p.y+=p.vy; if(p.x<0||p.x>canvas.width) p.vx*=-1; if(p.y<0||p.y>canvas.height) p.vy*=-1; ctx.beginPath(); ctx.arc(p.x,p.y,2,0,Math.PI*2); ctx.fillStyle='rgba(56,189,248,.4)'; ctx.fill(); } for(let i=0;i<count;i++) for(let j=i+1;j<count;j++){ const a=particles[i],b=particles[j]; const dx=a.x-b.x,dy=a.y-b.y,dist=Math.hypot(dx,dy); if(dist<connect){ ctx.strokeStyle=`rgba(56,189,248,${(1-dist/connect)*.3})`; ctx.beginPath(); ctx.moveTo(a.x,a.y); ctx.lineTo(b.x,b.y); ctx.stroke(); } } requestAnimationFrame(draw); } draw(); } function initSectionObserver() { const secs = document.querySelectorAll('section'); if (!secs.length) return; const io = new IntersectionObserver(entries => { entries.forEach(e => e.isIntersecting && e.target.classList.add('in-view')); }, { threshold: 0.1 }); secs.forEach(s => io.observe(s)); } function registerSW() { if ('serviceWorker' in navigator) navigator.serviceWorker.register('sw.js'); } })();